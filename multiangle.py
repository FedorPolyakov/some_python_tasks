'''
задание:
    Даны два многоугольника в виде координат вершин.
    Вам нужно выдать 1, если два многоугольника идентичны, и 0 иначе.
    Координаты вершин могут быть перечислены как по часовой стрелке, так и против.
Формат ввода:
    •	Стандартный или через input.txt
    •	Входные данные содержат две строки.
    •	В каждой строке перечислены координаты вершин на прямоугольной системе координат.
    •	Координаты каждой вершины окружены скобками и перечислены через запятую.
    •	Значение каждой координаты может быть от -21000 до 21000.
Формат вывода:
    •	Стандартный или через output.txt
    •	Одно число: 0 или 1.
'''

s1 = input('Введите координаты вершин первого многоугольника: ')
s2 = input('Введите координаты вершин второго многоугольника: ')
rect1 = [tuple(map(int, i.replace(')','').replace('(','').split(','))) for i in s1.split(')(')]
rect2 = [tuple(map(int, i.replace(')','').replace('(','').split(','))) for i in s2.split(')(')]

'''
Функция, проверяющая координаты точки условию: 
координата х или у должна лежать в пределаж от -21000 до 21000
если условие не выполнеятся - возвращается False, иначе True.
Аргументом функции является список кортежей (список точек коордринат многоугольника).
'''
def check_list(rect):
    check = True
    for i in rect:
        if check:
            for j in i:
                if j < -21000 or j > 21000:
                    check = False
                    break
        else:
            break
    return check

'''
Функция проверяющая условие:
Равны ли координаты точек двух многоугольников(т.е. равны ли (х1,у1) и (х2,у2).
Аргументами функции являются два списка точек координат многоугольников.
Если все точки равны - возвращается True, иначе - False
'''
def check_memb(lst1, lst2):
    for i in range(len(lst1)):
        if lst1[i] != lst2[i]:
            return False
    return True

'''
Главная функция. Она проверяет условие:
Идентичны ли два многоугольника, если да - вовзращает 1, иначе 0.
Аргументами функции являются два списка точек коордринат многоугольника.
'''
def main(m1, m2):
    if check_list(m1) and check_list(m2):
        if len(m1) == len(m2):
            '''
            если координаты точек оказались не равны друг другу, то развернем один из списков в обратном направлении.
            проверим, может точки были введены для одного многоугольника по часовой стрелки, а для другого - против часовой.
            '''
            if not check_memb(m1,m2):
                m2.reverse()
                if not check_memb(m1,m2):
                    return f'0'
                else:
                    return f'1'
            return f'1'
        else:
            return f'многоугольники не равны по количеству вершин'
    else:
        return f'значение координаты не может быть больше 21000 и меньше -21000'

print(main(rect1, rect2))